-- use users;
-- select * from restaurants;
-- 1. Create new column containing average rating of restaurants throught the dataset
-- SELECT * ,round(AVG(rating) over(),2) as avg_rating from restaurants;
-- 2. Create new column containing average rating_count of restaurants throught the dataset
-- SELECT * ,round(AVG(rating_count) over(),2) as avg_rating_count from restaurants;
-- 3. Create new column containing average cost of restaurants throught the dataset
-- SELECT * ,round(AVG(cost) over(),2) as avg_cost from restaurants;
-- 4. Create column containing average, min, max of cost,rating,rating_count of restaurants throught the dataset
-- SELECT id,NAME,city,cuisine,rating,
-- round(max(rating) over(),2) as max_rating,
-- round(avg(rating) over(),2) as avg_rating,
-- round(min(rating) over(),2) as min_rating,
-- round(max(cost) over(),2) as max_cost,
-- round(avg(cost) over(),2) as avg_cost,
-- round(min(cost) over(),2) as min_cost,
-- round(max(rating_count) over(),2) as max_rating_count,
-- round(avg(rating_count) over(),2) as avg_rating_count,
-- round(min(rating_count) over(),2) as min_rating_count
-- from restaurants;
-- 5. Create column containing average cost of the city where that specific restaurant is from
-- SELECT *,round(avg(cost) over(PARTITION BY city)) as avg_cost from restaurants;
-- 6. Create column containing average cost of the cuisine which that specific restaurant is serving
-- SELECT *,round(avg(cost) over(PARTITION BY cuisine)) as avg_cost from restaurants;
-- 7. Create both column together
-- SELECT *,
--     round(avg(cost) over(PARTITION BY city)) as avg_cost,
--     round(avg(cost) over(PARTITION BY city)) as avg_cost
-- from restaurants;
-- 8. List the restaurants whose cost is more than the average cost of the restaurants?
--  SELECT * from restaurants where cost > (select avg(cost) from restaurants  );
-- SELECT * from(SELECT *,avg(cost) over() as avg_cost from restaurants) t where t.cost>t.avg_cost;
-- 10. List the restaurants whose cuisine cost is more than the average cost?
-- SELECT * from(SELECT *,avg(cost) over(PARTITION BY cuisine) as avg_cost from restaurants) t where t.cost>t.avg_cost;
-- ^Advance window function
-- 1.List the top 5 cuisines as per the revenue genrated  by top 5 restarunt of every cuisine
-- SELECT cuisine,
--     sum(rating_count * cost )as 'revenue'
-- from(
--         SELECT *,
--             cost * rating_count, row_number() over(
--                 PARTITION by cuisine
--                 order by cost * rating_count desc
--             ) as 'rank'
--         from restaurants
--     )t where t.rank<6
--     GROUP BY cuisine
--     ORDER BY revenue DESC;
-- 2.What % of the totl revenue is generated by top 1% restraunts
-- SELECT sum(cost * rating_count) as 'revenue'
-- from (
--         SELECT *,
--             cost * rating_count,
--             row_number() over(
--                 order by cost * rating_count desc
--             ) as 'rank'
--         from restaurants
--     ) t
-- WHERE t.rank < 614;
-- 3.Check the same for top 20% restraunts
-- SELECT sum(cost * rating_count) as 'revenue'
-- from (
--         SELECT *,
--             cost * rating_count,
--             row_number() over(
--                 order by cost * rating_count desc
--             ) as 'rank'
--         from restaurants
--     ) t
-- WHERE t.rank < 12280;
--  4.What % of revenue is generated by top 20% of restarunts with respect to total revenue;
WITH q1 AS (
    SELECT SUM(cost * rating_count) AS top_revenue
    FROM (
        SELECT *,
            ROW_NUMBER() OVER (
                ORDER BY cost * rating_count DESC
            ) AS 'rank'
        FROM restaurants
    ) t
    WHERE t.rank < 12280    
),
q2 AS (
    SELECT SUM(rating_count * cost) AS total_revenue
    FROM restaurants
)
SELECT ROUND((top_revenue / total_revenue) * 100, 2) AS revenue_percentage
FROM q1, q2;
